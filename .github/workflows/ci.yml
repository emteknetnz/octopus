# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
# https://docs.github.com/en/actions/learn-github-actions/reusing-workflows

name: tests

# on:
#   push:
#   pull_request:
#   # every day at midnight:
#   # currently about 1:30pm nzt
#   schedule:
#     - cron: '0 0 * * *'

on:
  workflow_call:
    # TODO: could possibly get rid of inputs? instead just see if files exists e.g. if behat.yml then run endtoend
    # does mean that behat job will be created in modules that don't have behat though .. probably keep then?
    inputs:
      endtoend:
        type: boolean
        #description: "behat"
        required: false
        default: false
      js:
        type: boolean
        #description: "yarn build diff, yarn lint, yarn test"
        required: false
        default: false
      phpcoverage:
        type: boolean
        #description: "codecov"
        required: false
        default: true
      phplint:
        type: boolean
        #description: "phpcs, phpstan (optional), cow schema validate"
        required: false
        default: true
      phpunit:
        type: boolean
        #descrtiption: "phpunit"
        required: false
        default: true

jobs:

  tests:
    # TODO: check if this is an LTS - should be 20.04
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: SS_mysite
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      # set fail-fast to false prevent one job from cancelling other jobs
      fail-fast: false
      matrix:
        include:
          # behat test works - TODO: switch to serve.php TODO: change to endtoend for abstraction
          # - php: '7.3'
          #   behat: true
          # npm test probably works, though needs to be tested on a proper repo
          # - php: '7.4'
          #   npm: true
          - php: '7.4'
            phpunit: true
          # phpunit coverage test works
          # phpcoverage limited to php7.3 due to old phpunit5 otherwise you'll get Class 'PHP_Token_COALESCE_EQUAL' not found
          # - php: '7.3'
          #   phpcoverage: true
          - php: '7.4'
            phplint: true
          # phpstan probably works though needs to be tested on something that actually uses it
          # - php: '7.4'
          #   phpstan: true

    if: ${{ job.phpunit && inputs.phpunit || job.phplint && inputs.phplint }}

    # TODO:
    # - [ ] composer REQUIRE_GRAPHQL, REQUIRE_EXTRA, etc
    # - [ ] PDO

    name: PHP ${{ matrix.php }}${{ matrix.phpunit && ' - phpunit' || '' }}${{ matrix.behat && ' - behat' || '' }}${{ matrix.npm && ' - npm' || '' }}${{ matrix.phpcoverage && ' - phpcoverage' || '' }}${{ matrix.phplint && ' - phplint' || '' }}${{ matrix.phpstan && ' - phpstan' || '' }}${{ matrix.cow && ' - cow' || '' }}

    steps:
      - name: Preparation
        run: |
          mkdir artifacts
      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PHP - regular
        uses: shivammathur/setup-php@v2
        if: ${{ matrix.behat != true && matrix.phpcoverage != true }}
        with:
          php-version: ${{ matrix.php }}
          extensions: curl, dom, gd, intl, json, ldap, mbstring, mysql, tidy, zip
          tools: composer:v2

      - name: Install PHP - phpunit coverage test
        uses: shivammathur/setup-php@v2
        if: ${{ matrix.phpcoverage == true }}
        with:
          php-version: ${{ matrix.php }}
          extensions: curl, dom, gd, intl, json, ldap, mbstring, mysql, tidy, xdebug, zip
          tools: composer:v2
          coverage: xdebug

      # TODO: probably don't need apache, just revert to using serve.php for behat
      # would need to check if cms installed?  it's a different bootstrap to what's in behat.yml
      # For behat, install php manually
      # This is kind of slow at around 44 seconds, it's only used because there are
      # issues apt installing libapache2-mod-php which is needed for behat
      - name: Install PHP - behat test
        if: ${{ matrix.behat == true }}
        run: |
          # Make all php versions other than the current main version available
          sudo apt update && sudo sudo apt install -y software-properties-common
          sudo add-apt-repository -y ppa:ondrej/php
          sudo add-apt-repository -y ppa:ondrej/apache2
          sudo apt update
          sudo apt install libapache2-mod-php${{ matrix.php }} php${{ matrix.php }} php${{ matrix.php }}-cli php${{ matrix.php }}-curl  php${{ matrix.php }}-dom php${{ matrix.php }}-gd php${{ matrix.php }}-intl php${{ matrix.php }}-json php${{ matrix.php }}-ldap php${{ matrix.php }}-mbstring php${{ matrix.php }}-mysql php${{ matrix.php }}-tidy php${{ matrix.php }}-xdebug php${{ matrix.php }}-zip tidy
          # This this verison of PHP instead of the default ubuntu php8.0 install
          sudo rm /etc/alternatives/php
          sudo ln -s /usr/bin/php${{ matrix.php }} /etc/alternatives/php
          # Install composer
          php -r "copy('https://composer.github.io/installer.sig', 'installer.sig');"
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php -r "if (hash_file('sha384', 'composer-setup.php') === file_get_contents('installer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
          if [ -f composer-setup.php ]; then php composer-setup.php && rm composer-setup.php; fi
          rm installer.sig
          sudo mv composer.phar /usr/local/bin/composer

      - name: Configure PHP
        run: |
          sudo sh -c "echo 'memory_limit = 8196M' >> /etc/php/${{ matrix.php }}/cli/php.ini"
          if [ -f /etc/php/${{ matrix.php }}/apache2/php.ini ]; then
            sudo sh -c "echo 'memory_limit = 8196M' >> /etc/php/${{ matrix.php }}/apache2/php.ini"
          fi
          echo "PHP has been configured"

      - name: Configure apache - behat test
        if: ${{ matrix.behat == true }}
        run: |
          # apache2 is installed and running by default in ubuntu
          # update dir.conf to use index.php as the primary index doc
          sudo cp .github/things/dir.conf /etc/apache2/mods-enabled/dir.conf
          # this script will create a 000-default.conf file with the pwd as the DocumentRoot
          php .github/things/apache2.php
          sudo cp 000-default.conf /etc/apache2/sites-enabled/000-default.conf
          sudo a2enmod rewrite
          # run apache as 'runner:docker' instead of 'www-data:www-data'
          sudo sh -c "echo 'export APACHE_RUN_USER=runner' >> /etc/apache2/envvars"
          sudo sh -c "echo 'export APACHE_RUN_GROUP=docker' >> /etc/apache2/envvars"
          sudo systemctl restart apache2
          echo "Apache has been configured"

      - name: Composer
        run: |
          # github.base_ref is only available on pull-requests and is the target branch
          # github.ref is used for regular branch builds such as crons
          BRANCH=$(php -r "echo preg_replace('#^.+/#', '', '${{ github.base_ref }}'?:'${{ github.ref }}');")
          if [[ "$BRANCH" =~ ^[1-9]$ ]] || [[ "$BRANCH" =~ ^[1-9]\.[0-9]+$ ]]; then export COMPOSER_ROOT_VERSION="${BRANCH}.x-dev"; elif [[ "$BRANCH" =~ ^[1-9]\.[0-9]+\.[0-9]+ ]]; then export COMPOSER_ROOT_VERSION="${BRANCH}"; else export COMPOSER_ROOT_VERSION="dev-${BRANCH}"; fi
          echo "COMPOSER_ROOT_VERSION is $COMPOSER_ROOT_VERSION"
          composer require silverstripe/installer:4.9.x-dev --no-update --prefer-dist
          composer require silverstripe/recipe-testing:^1 --no-update --prefer-dist
          if [ ${{ matrix.phplint }} ]; then
            composer require --no-update silverstripe/cow dev-master --no-update --prefer-dist
          fi
          cp composer.json artifacts
          composer update --prefer-dist --no-interaction --no-progress
          cp composer.lock artifacts

      - name: Prepare Silverstripe
        run: |
          cp .github/things/.env .env
          vendor/bin/sake dev/build flush=1

      - name: phpunit
        if: ${{ matrix.phpunit == true }}
        run: |
          vendor/bin/phpunit --verbose
          echo "Passed"

      - name: behat
        if: ${{ matrix.behat == true }}
        run: |
          # this script will update behat.yml to work with headless chrome
          php .github/things/behat.php
          nohup sh -c "chromedriver --log-path=artifacts/chromedriver.log --log-level=INFO" > /dev/null 2>&1 &
          vendor/bin/behat octopus
          echo "Passed"

      - name: js
        if: ${{ matrix.js == true }}
        run: |
          wget https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh
          php -r "if (hash_file('sha384', 'install.sh') === 'dd4b116a7452fc3bb8c0e410ceac27e19b0ba0f900fe2f91818a95c12e92130fdfb8170fec170b9fb006d316f6386f2b') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('install.sh'); } echo PHP_EOL;"
          if [ ! -f install.sh ]; then echo "Cannot install nvm" && exit 1; fi
          . install.sh
          rm install.sh
          export NVM_DIR="$HOME/.nvm"
          # this loads nvm into the current terminal
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          if [ ! -f .nvmrc ]; then echo "Missing .nvmrc" && exit 1; fi
          nvm install
          nvm use
          rm -rf client/dist
          npm install -g yarn
          yarn install --network-concurrency 1
          if [ -d vendor/silverstripe/admin ]; then
            cd vendor/silverstripe/admin
            yarn install --network-concurrency 1
            cd ../../..
          fi
          yarn run build
          git diff-files --quiet -w --relative=client
          git diff --name-status --relative=client
          yarn run test
          yarn run lint
          echo "Passed"

      - name: phplint
        if: ${{ matrix.phplint == true }}
        run: |
          # phpcs is required
          if [ ! -f phpcs.xml.dist ]; then echo "Missing phpcs.xml.dist" && exit 1; fi
          vendor/bin/phpcs
          # phpstan is optional
          if [ -f phpstan.neon.dist ]; then
            vendor/bin/phpstan analyse
          fi
          # cow validation is also done here due to it being a tiny piece of work not meriting its own job
          if [ -f .cow.json ];
            vendor/bin/cow schema:validate
          fi
          echo "Passed"

      - name: phpcoverage
        if: ${{ matrix.phpcoverage == true }}
        run: |
          curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import
          curl -Os https://uploader.codecov.io/latest/codecov-linux
          curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM
          curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM.sig
          gpg --verify codecov-linux.SHA256SUM.sig codecov-linux.SHA256SUM
          shasum -a 256 -c codecov-linux.SHA256SUM
          chmod +x codecov-linux
          phpdbg -qrr vendor/bin/phpunit --coverage-clover=coverage.xml
          # TODO: uncomment so that it uploads
          # ./codecov-linux -f coverage.xml;
          # echo "coverage.xml generated and uploaded to codecov"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: artifacts
          path: artifacts
