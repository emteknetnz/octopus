# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
# https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
# https://docs.github.com/en/actions/learn-github-actions/reusing-workflows

# TODO:
# - [ ] custom jobs matrix in inputs
# - [ ] provision as inputs? e.g. self (no jobs) how would that work?
# (kind of seems like I'll need the json matrix)
# - [ ] Artifacts aren't working right when in reusing jobs context
# - [ ] composer REQUIRE_GRAPHQL, etc
# - [ ] matrix entry for graphql3 vs 4 for behat
# - [ ] PDO matrix entry
# - [ ] Probably get rid of apache and use serve.php for behat since it'll run the job faster and it simplies this file (though behat will always be slow)

name: ci

on:
  workflow_call:
    inputs:
      # default/extra jobs must be multi-line string, as there's no support for type: array for inputs

      default_jobs:
        type: string
        required: false
        default: |
          - php: 7.3
            endtoend: true
          - php: 7.4
            js: true
          - php: 7.3
            phpcoverage: true
          - php: 7.4
            phplinting: true
          - php: 7.4
            phpunit: true
      extra_jobs:
        type: string
        required: false
        default: 'none'
      run_endtoend:
        type: boolean
        required: false
        default: false
      run_js:
        type: boolean
        required: false
        default: false
      run_phpcoverage:
        type: boolean
        required: false
        default: true
      run_phplinting:
        type: boolean
        required: false
        default: true
      run_phpunit:
        type: boolean
        required: false
        default: true
      composer_require_extra:
        type: string
        required: false
        default: ''

jobs:

  # used to generate a dynamic jobs matrix
  genmatrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: yaml
      - name: generate matrix
        id: generate-matrix
        run: |
          wget https://raw.githubusercontent.com/emteknetnz/octopus/main/.github/things/matrix.php
          touch inputs.yml
          echo "run_endtoend: ${{ inputs.run_endtoend }}" >> inputs.yml
          echo "run_js: ${{ inputs.run_js }}" >> inputs.yml
          echo "run_phpcoverage: ${{ inputs.run_phpcoverage }}" >> inputs.yml
          echo "run_phplinting: ${{ inputs.run_phplinting }}" >> inputs.yml
          echo "run_phpunit: ${{ inputs.run_phpunit }}" >> inputs.yml
          echo "default_jobs:" >> inputs.yml
          echo "${{ inputs.default_jobs }}" >> inputs.yml
          echo "extra_jobs:" >> inputs.yml
          echo "${{ inputs.extra_jobs }}" >> inputs.yml
          cat inputs.yml
          MATRIX_JSON=$(php matrix.php)
          echo "::set-output name=matrix::${MATRIX_JSON}"

  tests:
    # TODO: check if this is an LTS - should be 20.04
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: SS_mysite
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    needs: genmatrix

    strategy:
      # set fail-fast to false prevent one job from cancelling other jobs
      fail-fast: false
      matrix: ${{fromJson(needs.genmatrix.outputs.matrix)}}

    env:
      artifacts_name: php${{ matrix.php }}_${{ matrix.phpunit && 'phpunit' || '' }}${{ matrix.endtoend && 'endtoend' || '' }}${{ matrix.js && 'js' || '' }}${{ matrix.phpcoverage && 'phpcoverage' || '' }}${{ matrix.phplinting && 'phplinting' || '' }}

    name: PHP ${{ matrix.php }}${{ matrix.phpunit && ' - phpunit' || '' }}${{ matrix.endtoend && ' - endtoend' || '' }}${{ matrix.js && ' - js' || '' }}${{ matrix.phpcoverage && ' - phpcoverage' || '' }}${{ matrix.phplinting && ' - phplinting' || '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        if: ${{ !matrix.phpcoverage }}
        with:
          php-version: ${{ matrix.php }}
          extensions: curl, dom, gd, intl, json, ldap, mbstring, mysql, tidy, zip
          tools: composer:v2

      - name: Install PHP - PHP coverage test
        uses: shivammathur/setup-php@v2
        if: ${{ matrix.phpcoverage }}
        with:
          php-version: ${{ matrix.php }}
          extensions: curl, dom, gd, intl, json, ldap, mbstring, mysql, tidy, xdebug, zip
          tools: composer:v2
          coverage: xdebug

      - name: Configure PHP
        run: |
          if [ ! $(which php) ]; then echo "PHP not installed, skipping" && exit 0; fi
          sudo sh -c "echo 'memory_limit = 8196M' >> /etc/php/${{ matrix.php }}/cli/php.ini"
          if [ -f /etc/php/${{ matrix.php }}/apache2/php.ini ]; then
            sudo sh -c "echo 'memory_limit = 8196M' >> /etc/php/${{ matrix.php }}/apache2/php.ini"
          fi
          echo "PHP has been configured"

      - name: Install additional requirements - endtoend test
        if: ${{ matrix.endtoend == true }}
        run: |
          sudo apt install -y software-properties-common
          sudo add-apt-repository -y ppa:ondrej/php
          sudo add-apt-repository -y ppa:ondrej/apache2
          sudo apt update
          sudo apt install libapache2-mod-php${{ matrix.php }}

      - name: Configure apache - endtoend test
        if: ${{ matrix.endtoend }}
        run: |
          # apache2 is installed and running by default in ubuntu
          # update dir.conf to use index.php as the primary index doc
          wget https://raw.githubusercontent.com/emteknetnz/octopus/main/.github/things/dir.conf
          sudo cp dir.conf /etc/apache2/mods-enabled/dir.conf
          rm dir.conf
          # this script will create a 000-default.conf file with the pwd as the DocumentRoot
          wget https://raw.githubusercontent.com/emteknetnz/octopus/main/.github/things/000-default.conf
          wget https://raw.githubusercontent.com/emteknetnz/octopus/main/.github/things/apache2.php
          # TODO: this script pretty basic and could probably be replaced with cat 000-default.conf | tr oldtxt newtext
          php apache2.php
          sudo cp 000-default.conf /etc/apache2/sites-enabled/000-default.conf
          rm 000-default.conf
          rm apache2.php
          sudo a2enmod rewrite
          # run apache as 'runner:docker' instead of 'www-data:www-data'
          sudo sh -c "echo 'export APACHE_RUN_USER=runner' >> /etc/apache2/envvars"
          sudo sh -c "echo 'export APACHE_RUN_GROUP=docker' >> /etc/apache2/envvars"
          sudo systemctl restart apache2
          echo "Apache has been configured"

      - name: Composer
        run: |
          if [ ! $(which php) ]; then echo "PHP not installed, skipping" && exit 0; fi
          # Update composer.json and install dependencies
          # github.base_ref is only available on pull-requests and is the target branch
          # github.ref is used for regular branch builds such as crons
          BRANCH=$(php -r "echo preg_replace('#^.+/#', '', '${{ github.base_ref }}'?:'${{ github.ref }}');")
          if [[ "$BRANCH" =~ ^[1-9]$ ]] || [[ "$BRANCH" =~ ^[1-9]\.[0-9]+$ ]]; then export COMPOSER_ROOT_VERSION="${BRANCH}.x-dev"; elif [[ "$BRANCH" =~ ^[1-9]\.[0-9]+\.[0-9]+ ]]; then export COMPOSER_ROOT_VERSION="${BRANCH}"; else export COMPOSER_ROOT_VERSION="dev-${BRANCH}"; fi
          echo "COMPOSER_ROOT_VERSION is $COMPOSER_ROOT_VERSION"
          # TODO: hardecoded version of installer
          composer require silverstripe/installer:4.9.x-dev --no-update --prefer-dist
          composer require silverstripe/recipe-testing:^1 --no-update --prefer-dist
          # TODO: tmp until behat-extension PR merged
          if [ ${{ matrix.endtoend }} ]; then
            composer config repositories.x1 '{"type": "vcs", "url": "https://github.com/silverstripe/silverstripe-behat-extension.git"}'
            composer require --no-update 'silverstripe/behat-extension:dev-pulls/4/skip-mfa as 4.5.0'
          fi
          if [ ${{ matrix.phplinting }} ]; then
            composer require silverstripe/cow:dev-master --no-update --prefer-dist
          fi
          if [ "${{ inputs.require_extra }}" != "" ]; then
            composer require "${{ inputs.require_extra }}" --no-update --prefer-dist
          fi
          composer update --prefer-dist --no-interaction --no-progress

      - name: Preparation
        run: |
          # Add .env file and create artifacts directory
          wget https://raw.githubusercontent.com/emteknetnz/octopus/main/.github/things/.env
          # Artifacts directory must be created after composer install as it would remove the artifacts directory
          mkdir artifacts
          # Shouldn't dev/build flush here
          # There were issues with a unit test getting the following issue
          # Identifier name 'SilverStripe_CampaignAdmin_Tests_AddToCampaignValidatorTest_TestObject' is too long
          # Likely because the /tmp/silverstripe-cache-php7.4.xyz... dir being out of sync with TestOnly objects
          # If dev/build flush is needed here then delete the silverstripe-cache dir afterwards

      - name: Tests - PHPUnit
        if: ${{ matrix.phpunit }}
        run: |
          vendor/bin/phpunit --verbose
          echo "Passed"

      - name: Tests - End to end
        if: ${{ matrix.endtoend == true }}
        run: |
          # Run behat tests
          if [ ! -f behat.yml ]; then echo "behat.yml missing" && exit 1; fi
          # this script will update behat.yml to work with headless chrome
          wget https://raw.githubusercontent.com/emteknetnz/octopus/main/.github/things/behat-headless.yml
          wget https://raw.githubusercontent.com/emteknetnz/octopus/main/.github/things/behat.php
          php behat.php
          rm behat.php
          rm behat-headless.yml
          nohup sh -c "chromedriver" > /dev/null 2>&1 &
          vendor/bin/behat
          echo "Passed"

      - name: Tests - JS
        if: ${{ matrix.js }}
        run: |
          # Run yarn test etc
          if [ ! -f package.json ]; then echo "package.json missing" && exit 1; fi
          wget https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh
          php -r "if (hash_file('sha384', 'install.sh') === 'dd4b116a7452fc3bb8c0e410ceac27e19b0ba0f900fe2f91818a95c12e92130fdfb8170fec170b9fb006d316f6386f2b') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('install.sh'); } echo PHP_EOL;"
          if [ ! -f install.sh ]; then echo "Cannot install nvm" && exit 1; fi
          . install.sh
          rm install.sh
          export NVM_DIR="$HOME/.nvm"
          # this loads nvm into the current terminal
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          if [ ! -f .nvmrc ]; then echo "Missing .nvmrc" && exit 1; fi
          nvm install
          nvm use
          rm -rf client/dist
          npm install -g yarn
          yarn install --network-concurrency 1
          if [ -d vendor/silverstripe/admin ]; then
            cd vendor/silverstripe/admin
            yarn install --network-concurrency 1
            cd ../../..
          fi
          yarn run build
          git diff-files --quiet -w --relative=client
          git diff --name-status --relative=client
          yarn run test
          yarn run lint
          echo "Passed"

      - name: Tests - PHP linting
        if: ${{ matrix.phplinting }}
        run: |
          if [ ! -f phpcs.xml.dist ]; then echo "Missing phpcs.xml.dist" && exit 1; fi
          vendor/bin/phpcs
          # phpstan is optional
          if [ -f phpstan.neon.dist ]; then
            vendor/bin/phpstan analyse
          fi
          # cow validation is also done here due to it being a tiny piece of work not meriting its own step
          if [ -f .cow.json ]; then
            vendor/bin/cow schema:validate
          fi
          echo "Passed"

      - name: Tests - PHP Coverage
        if: ${{ matrix.phpcoverage }}
        run: |
          curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import
          curl -Os https://uploader.codecov.io/latest/codecov-linux
          curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM
          curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM.sig
          gpg --verify codecov-linux.SHA256SUM.sig codecov-linux.SHA256SUM
          shasum -a 256 -c codecov-linux.SHA256SUM
          chmod +x codecov-linux
          phpdbg -qrr vendor/bin/phpunit --coverage-clover=coverage.xml
          # TODO: uncomment so that it uploads
          # ./codecov-linux -f coverage.xml;
          # echo "coverage.xml generated and uploaded to codecov"

      - name: Copy artifacts
        run: |
          # Copy selected files to the artifacts dir
          cp composer.json artifacts
          cp composer.lock artifacts
          if [ ${{ matrix.endtoend }} ]; then cp behat.yml artifacts; fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ${{ env.artifacts_name }}
          path: artifacts
