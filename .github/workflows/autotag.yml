name: Tag patch release

on:
  pull_request:
    # https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#pull_request
    # There isn't a specific 'on merge' type, closed is the best available, use with a conditional statement on the action
    types: [closed]
    branches:
      - 1.*
      - 2.*
      - 3.*
      - 4.*
      - 5.*
      - 6.*
      - 7.*
      - 8.*
      - 9.*
      - 10.*
      - 11.*
      - 12.*
      - 13.*
      - 14.*
      - 15.*

jobs:
  mainjob:
    if: github.event.action == 'closed' && github.event.pull_request.merged
    name: 'Main job'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # Use `fetch-depth: 0` so that `git tag` works as expected as well as changelog generation
          # This possibly isn't as efficient as using the github API, though if framework (largest repo) work fine then just keep as is
          fetch-depth: 0
          
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        
      - name: Tag patch release
        run: |
          # Tag patch release
          
          MINOR_BRANCH=${{ github.base_ref }}
          if ! [[ "$MINOR_BRANCH" =~ ^[0-9]+\.[0-9]+$ ]]; then echo "Invalid minor branch $MINOR_BRANCH, existing" && exit 1; fi
                              
          # Get the current patch number
          git tag > __tags.txt
          cat << EOF > __run.php
          <?php
          \$arr = [];
          foreach (explode("\n", file_get_contents('__tags.txt')) as \$tag) {
            if (!preg_match('#^([0-9]+)\.([0-9]+)\.([0-9]+)\$#', \$tag, \$m)) continue;
            list(\$z, \$a, \$b, \$c) = \$m;
            if ("\$a.\$b" != '$MINOR_BRANCH') continue;
            \$arr[] = (int) "\$c";
          }
          sort(\$arr);
          if (count(\$arr) > 0) echo \$arr[count(\$arr) - 1];
          EOF
          
          CURR_PATCH_N=$(php __run.php)
          if [ "$CURR_PATCH_N" == "" ]; then CURR_PATCH_N="$MINOR_BRANCH.0"; fi
          NEXT_PATCH_N=$((CURR_PATCH_N+1))
          TAG="$MINOR_BRANCH.$NEXT_PATCH_N"
          
          CHANGELOG=$(git log --oneline --pretty=format:"* %s (%an) - %h" --no-merges $MINOR_BRANCH.$CURR_PATCH_N...$MINOR_BRANCH)
          echo "$CHANGELOG" > __changelog.txt
          CHANGELOG=$(php -r 'echo str_replace(["\n", "\""], ["\\n", "\\\""], trim(file_get_contents("__changelog.txt")));')
          
          SHA=$(git rev-parse HEAD)
          
          # POST new tag to GitHub API
          # Note: secrets.GITHUB_TOKEN is an auto-generated token, no need to manually create a secret in the repo
          curl -s -X POST https://api.github.com/repos/${{ github.repository }}/git/refs \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @- << EOF
          {
            "ref": "refs/tags/$TAG",
            "sha": "$SHA"
          }
          EOF
          
          # POST new release to GitHub API
          curl -s -X POST https://api.github.com/repos/${{ github.repository }}/releases \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @- << EOF
          {
            "tag_name": "$TAG",
            "name": "$TAG",
            "body": "this should be dollar changelog"
          }
          EOF
          
          echo "$TAG has been tagged and released"
          
