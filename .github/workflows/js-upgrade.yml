# Because we're checking out admin 1 only, we must only run this script on next-minor branches

name: JS upgrade (next-minor branch only)

on:
  # TODO: cron, not push
  push:

jobs:
  mainjob:
    name: 'Main job'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo ::set-output name=version::$(cat .nvmrc)
        id: read-nvm

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.read-nvm.outputs.version }}

      - name: Install yarn
        run: npm install --global yarn

      - name: Install admin JS
        if: github.event.repository.name != 'admin'
        run: |
          DIR=$(pwd)
          cd ..
          git clone https://github.com/silverstripe/silverstripe-admin.git
          mv silverstripe-admin admin
          cd admin
          git checkout 1
          yarn install
          cd $DIR

      - name: Yarn upgrade
        run: yarn upgrade

      - name: Read package.json
        id: package-json
        run: |
          LINT=0
          TEST=0
          if [ "$(jq .scripts.lint? package.json)" != "null" ]; then LINT=1; fi
          if [ "$(jq .scripts.test? package.json)" != "null" ]; then TEST=1; fi
          echo "::set-output name=lint::$LINT"
          echo "::set-output name=test::$TEST"
          echo "LINT is $LINT"
          echo "TEST is $TEST"

      # The following 3 steps make up `yarn build` though split apart to make it easier
      # to see where any failures originate from
      # TODO: pending merge on https://github.com/silverstripe/eslint-config/pull/8
      # - name: Yarn lint
      #   if: steps.package-json.outputs.lint == 1
      #   run: yarn lint

      - name: Yarn test
        if: steps.package-json.outputs.test == 1
        run: yarn test

      - name: Build JS with webpack
        run: NODE_ENV=production node_modules/webpack/bin/webpack.js -p --bail --progress

      - name: Git
        run: |
          BRANCH=$(echo ${{ github.ref }} | cut -c 12-)
          NEW_BRANCH=pulls/$BRANCH/update-js-$(date +%s)
          git config --local user.name "github-actions"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b $NEW_BRANCH
          git add .
          git status
          git commit -m 'DEP Update JS'
          git push --set-upstream origin $NEW_BRANCH

      # https://docs.github.com/en/rest/reference/pulls#create-a-pull-request
      - name: Create pull-request
        run: |
          curl -s \
          -X POST https://api.github.com/repos/${{ github.repository }}/pulls \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @- << EOF
          {
            "title": "Update JS"
            "body": "Automated yarn upgrade and yarn build"
            "head": "$NEW_BRANCH",
            "base": "$BRANCH"
          }
          EOF
